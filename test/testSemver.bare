# Licensed under the MIT License
# https://github.com/craigahobbs/npm-dependency-explorer/blob/main/LICENSE

include '../semver.bare'


function testSemverParse():
    unittestDeepEqual( \
        semverParse('1.2.3-beta.1+1234'), \
        {'build': '1234', 'major': 1, 'minor': 2, 'patch': 3, 'release': ['beta', 1]} \
    )
endfunction
unittestRunTest('testSemverParse')


function testSemverStringify():
    unittestEqual( \
        semverStringify(semverParse('1.2.3-beta.1+1234')), \
        '1.2.3-beta.1+1234' \
    )
endfunction
unittestRunTest('testSemverStringify')


function testSemverCompare_release():
    semver = semverParse('1.2.3-beta.1+1234')
    other = semverParse('1.2.2-rc.2+1235')
    unittestEqual(semverCompare(semver, other), 1)
    unittestEqual(semverCompare(other, semver), -1)
    unittestEqual(semverCompare(semver, semver), 0)
    unittestEqual(semverCompare(other, other), 0)
endfunction
unittestRunTest('testSemverCompare_release')


function testSemverCompare_releaseSame():
    semver = semverParse('1.2.3-beta.1+1234')
    other = semverParse('1.2.3-beta.2+1235')
    unittestEqual(semverCompare(semver, other), -1)
    unittestEqual(semverCompare(other, semver), 1)
    unittestEqual(semverCompare(semver, semver), 0)
    unittestEqual(semverCompare(other, other), 0)
endfunction
unittestRunTest('testSemverCompare_releaseSame')


function testSemverVersions():
    versions = semverVersions(['1.2.2', '1.2.2-rc.2+1235'])
    dataCalculatedField(versions, 'semver', 'semver != null')
    unittestDeepEqual( \
        versions, \
        [ \
            {'build': null, 'major': 1, 'minor': 2, 'patch': 2, 'release': null, 'semver': true}, \
            {'build': '1235', 'major': 1, 'minor': 2, 'patch': 2, 'release': ['rc', 2], 'semver': true} \
        ] \
    )
endfunction
unittestRunTest('testSemverVersions')


function testSemverMatch_parts():
    versions = semverVersions([\
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3', \
        '2.0.0-beta.1', '2.0.0', '2.0.1' \
    ])
    for rangeVersion in [ \
        ['1.0.1 || >= 1.1.1 < 2.0.0', '1.1.3'] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_parts')


function testSemverMatch_tilde():
    versions = semverVersions([\
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3', \
        '1.2.1', '1.2.2', '1.2.3', \
        '2.0.0-beta.1', '2.0.0', '2.0.1', \
        '2.1.0-beta.1', '2.1.0-beta.2' \
    ])
    for rangeVersion in [ \
        ['~1', '1.2.3'], \
        ['~1.1', '1.1.3'], \
        ['~1.1.2', '1.1.3'], \
        ['~1.3', null], \
        ['~2.0.0-beta.1', '2.0.1'], \
        ['~2.1.0-beta.1', '2.1.0-beta.2'] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_tilde')


function testSemverMatch_carrot():
    versions = semverVersions([\
        '0.0.1', '0.0.2', '0.0.3', \
        '0.1.1', '0.1.2', '0.1.3', \
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3', \
        '1.2.1-beta.1', '1.2.1-beta.2', \
        '2.0.0' \
    ])
    for rangeVersion in [ \
        ['^0.0.1', '0.0.1'], \
        ['^0.0.3', '0.0.3'], \
        ['^0.0.4', null], \
        ['^0.1.1', '0.1.3'], \
        ['^0.1.3', '0.1.3'], \
        ['^0.1.4', null], \
        ['^1.0.1', '1.1.3'], \
        ['^1.0.3', '1.1.3'], \
        ['^1.0.4', '1.1.3'], \
        ['^1.1.1', '1.1.3'], \
        ['^1.1.3', '1.1.3'], \
        ['^1.1.4', null], \
        ['^1.2.1-beta.1', '1.2.1-beta.2'], \
        ['^1.2.1', null], \
        ['^2.0.0', '2.0.0'] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_carrot')


function testSemverMatch_hyphen():
    versions = semverVersions([\
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3', \
        '2.0.0-beta.1', '2.0.0', '2.0.1', \
        '2.1.0-beta.1' \
    ])
    for rangeVersion in [ \
        ['1 - 2', '1.1.3'], \
        ['1.0 - 2.0', '1.1.3'], \
        ['1.0.0 - 2.0', '1.1.3'], \
        ['1.0.0 - 2.0.0', '2.0.0'], \
        ['2.0.0-beta.1 - 3', '2.0.1'], \
        ['2.1.0-beta.1 - 3', '2.1.0-beta.1'], \
        ['1.0. - 2.0', null], \
        ['1.0 - 2.0.', null], \
        ['1. - 2', null], \
        ['1 - 2.', null], \
        [' - 2.', null], \
        ['1 -', null] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_hyphen')


function testSemverMatch_range():
    versions = semverVersions([\
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3', \
        '2.0.0-beta.1', '2.0.0', '2.0.1' \
    ])
    for rangeVersion in [ \
        ['1.0.1', '1.0.1'], \
        ['1.0.4', null], \
        ['= 1.0.1', '1.0.1'], \
        ['= 1.0.4', null], \
        ['> 1.0.1', '2.0.1'], \
        ['> 3.0.0', null], \
        ['>= 1.0.1', '2.0.1'], \
        ['>= 3.0.0', null], \
        ['< 1.0.2', '1.0.1'], \
        ['< 1.0.0', null], \
        ['<= 1.0.2', '1.0.2'], \
        ['<= 0.0.0', null], \
        ['>= 1.0.2 < 2.0.0', '1.1.3'] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_range')


function testSemverMatch_xRange():
    versions = semverVersions([\
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3', \
        '2.0.0-beta.1', '2.0.0', '2.0.1', \
        '2.1.0-beta.1' \
    ])
    for rangeVersion in [ \
        ['', '2.0.1'], \
        ['*', '2.0.1'], \
        ['1', '1.1.3', '1'], \
        ['1.x', '1.1.3'], \
        ['1.x.x', '1.1.3'], \
        ['1.x.', null], \
        ['1.', null] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_xRange')


function testSemverMatch_space():
    versions = semverVersions([\
        '0.0.1', '0.0.2', '0.0.3', \
        '0.1.1', '0.1.2', '0.1.3', \
        '1.0.1', '1.0.2', '1.0.3', \
        '1.1.1', '1.1.2', '1.1.3' \
    ])
    for rangeVersion in [ \
        [' ', '1.1.3'], \
        [' ^ 1.0.1 ', '1.1.3'], \
        [' ~ 1.0.1 ', '1.0.3'], \
        [' 1.0.1  -  2 ', '1.1.3'], \
        [' >= 1 < 2 ', '1.1.3'], \
        [' 1 ', '1.1.3'] \
    ]:
        range = arrayGet(rangeVersion, 0)
        version = arrayGet(rangeVersion, 1)
        unittestEqual(semverMatch(versions, range), version, jsonStringify(range))
    endfor
endfunction
unittestRunTest('testSemverMatch_space')
