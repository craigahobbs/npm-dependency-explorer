# Licensed under the MIT License
# https://github.com/craigahobbs/npm-dependency-explorer/blob/main/LICENSE

include 'semver.mds'


# Create an npm package page URL
function npmPackagePageURL(packageName)
    return 'https://www.npmjs.com/package/' + urlEncodeComponent(packageName)
endfunction


# Create an npm package data URL
function npmPackageURL(packageName)
    return 'https://registry.npmjs.org/' + urlEncodeComponent(packageName)
endfunction


# Get a package version's JSON
function npmPackageJSON(packageData, packageVersion)
    return objectGet(objectGet(packageData, 'versions'), packageVersion)
endfunction


# Get a package's latest version
function npmPackageVersionLatest(packageData)
    return objectGet(objectGet(packageData, 'dist-tags'), 'latest')
endfunction


# Initialize the package data cache
function npmCacheNew()
    return objectNew( \
        'packages', objectNew(), \
        'versions', objectNew(), \
        'ranges', objectNew() \
    )
endfunction


# Get package data from the cache
function npmCacheGetPackage(cache, packageName)
    return objectGet(objectGet(cache, 'packages'), packageName)
endfunction


# Get package versions from the cache
function npmCacheGetPackageVersions(cache, packageName)
    return objectGet(objectGet(cache, 'versions'), packageName)
endfunction


# Get a package version from a semver range
function npmCacheGetPackageVersion(cache, packageName, packageRange)
    # Get the semver range version
    packageRanges = objectGet(objectGet(cache, 'ranges'), packageName)
    if objectHas(packageRanges, packageRange):
        packageVersion = objectGet(packageRanges, packageRange)
    else:
        packageVersion = semverMatch(npmCacheGetPackageVersions(cache, packageName), packageRange)
        if packageVersion == null:
            packageVersion = npmPackageVersionLatest(npmCacheGetPackage(cache, packageName))
            consoleLogDebug('npm: Un-matched SemVer range "' + packageRange + '" for package "' + packageName + '"' + \
                ', using "' + packageVersion + '" (latest)')
        endif
        objectSet(packageRanges, packageRange, packageVersion)
    endif
    return packageVersion
endfunction


# Load a package version and its dependencies into the cache - returns the package version
async function npmCacheLoadPackage(cache, packageName, packageVersion, dependencyKey)
    # Load the package data
    cachePackages = objectGet(cache, 'packages')
    if objectHas(cachePackages, packageName):
        packageData = objectGet(cachePackages, packageName)
    else:
        packageData = httpFetch(npmPackageURL(packageName))
        npmCacheAddPackage(cache, packageName, packageData)
    endif

    if packageData != null:
        # If no package version is provided, default to the latest version
        if packageVersion == null:
            packageVersion = npmPackageVersionLatest(packageData)
        endif

        # Load the package JSON's dependencies
        packageJSON = npmPackageJSON(packageData, packageVersion)
        if packageJSON != null:
            npmCacheLoadPackageJSONs(cache, arrayNew(packageJSON), dependencyKey)
        endif
    endif

    return packageVersion
endfunction


# Load a package version and its dependencies into the cache
async function npmCacheLoadPackageAll(cache, packageName, dependencyKey)
    # Load the package data
    cachePackages = objectGet(cache, 'packages')
    if objectHas(cachePackages, packageName):
        packageData = objectGet(cachePackages, packageName)
    else:
        packageData = httpFetch(npmPackageURL(packageName))
        npmCacheAddPackage(cache, packageName, packageData)
    endif

    if packageData != null:
        # Get the package version JSONs
        packageJSONs = arrayNew()
        packageVersions = objectGet(packageData, 'versions')
        for packageVersion in objectKeys(packageVersions):
            arrayPush(packageJSONs, objectGet(packageVersions, packageVersion))
        endfor

        # Load the package JSON's dependencies
        npmCacheLoadPackageJSONs(cache, packageJSONs, dependencyKey)
    endif
endfunction


# Add package data to the cache
function npmCacheAddPackage(cache, packageName, packageData)
    # Add the package data to the cache
    objectSet(objectGet(cache, 'packages'), packageName, packageData)

    # Add the parsed semver array to the cache
    versionKeys = if(packageData != null, objectKeys(objectGet(packageData, 'versions')))
    versions = if(versionKeys != null, semverVersions(versionKeys), arrayNew())
    objectSet(objectGet(cache, 'versions'), packageName, versions)

    # Add the empty semver match map
    objectSet(objectGet(cache, 'ranges'), packageName, objectNew())
endfunction


# Recursively load a package's data
async function npmCacheLoadPackageJSONs(cache, packageJSONs, dependencyKey)
    cachePackages = objectGet(cache, 'packages')
    cacheRanges = objectGet(cache, 'ranges')

    # Compute the unloaded dependencies for the given package JSON
    unloadedNames = objectNew()
    unloadedRanges = arrayNew()
    for packageJSON in packageJSONs:
        # Get the package dependencies
        packageDependencies = objectGet(packageJSON, dependencyKey)
        if packageDependencies != null:
            # Add to the unloaded dependencies
            for dependencyName in objectKeys(packageDependencies):
                dependencyRange = objectGet(packageDependencies, dependencyName)

                # Add the unloaded dependency package
                if !objectHas(cachePackages, dependencyName):
                    objectSet(unloadedNames, dependencyName)
                endif

                # Add the unloaded dependency range
                if !objectHas(objectGet(cacheRanges, dependencyName), dependencyRange):
                    arrayPush(unloadedRanges, arrayNew(dependencyName, dependencyRange))
                endif
            endfor
        endif
    endfor

    # Compute the package data URLs for the unloaded dependency package names
    unloadedNames = objectKeys(unloadedNames)
    unloadedURLs = arrayNew()
    for unloadedName in unloadedNames:
        arrayPush(unloadedURLs, npmPackageURL(unloadedName))
    endfor

    # Fetch the unloaded depedency data URLs and add to the cache
    for dependencyData, ixDependencyData in httpFetch(unloadedURLs):
        npmCacheAddPackage(cache, arrayGet(unloadedNames, ixDependencyData), dependencyData)
    endfor

    # Get the array of fetched package JSONs
    unloadedJSONs = arrayNew()
    for unloadedNameRange in unloadedRanges:
        unloadedName = arrayGet(unloadedNameRange, 0)
        unloadedRange = arrayGet(unloadedNameRange, 1)

        # Has the package range already been computed?
        if objectHas(objectGet(cacheRanges, unloadedName), unloadedRange):
            continue
        endif

        # Compute the package range version
        unloadedData = npmCacheGetPackage(cache, unloadedName)
        if unloadedData != null:
            unloadedVersion = npmCacheGetPackageVersion(cache, unloadedName, unloadedRange)
            if unloadedVersion != null:
                unloadedJSON = npmPackageJSON(unloadedData, unloadedVersion)
                if unloadedJSON != null:
                    arrayPush(unloadedJSONs, unloadedJSON)
                endif
            endif
        endif
    endfor

    # Compute the dependencies' dependencies
    if arrayLength(unloadedJSONs):
        npmCacheLoadPackageJSONs(cache, unloadedJSONs, 'dependencies')
    endif
endfunction


# Compute an npm package's dependency data table
function npmCacheGetPackageDependencies(cache, dependencies, warnings, completed, packageName, packageVersion, dependencyKey)
    # Package and version already loaded?
    if !objectHas(completed, packageName):
        objectSet(completed, packageName, objectNew())
    endif
    completedVersions = objectGet(completed, packageName)
    if objectHas(completedVersions, packageVersion):
        return
    endif
    objectSet(completedVersions, packageVersion)

    # Get the package dependencies object
    packageData = npmCacheGetPackage(cache, packageName)
    packageJSON = if(packageData != null, npmPackageJSON(packageData, packageVersion))
    packageDependencies = if(packageJSON != null, objectGet(packageJSON, dependencyKey))
    dependencyNames = if(packageDependencies != null, objectKeys(packageDependencies))
    if dependencyNames == null:
        return
    endif

    # Add the package dependency rows
    for dependencyName in dependencyNames:
        # Determine the dependency version
        dependencyRange = objectGet(packageDependencies, dependencyName)
        dependencyVersion = npmCacheGetPackageVersion(cache, dependencyName, dependencyRange)
        if dependencyVersion == null:
            arrayPush(warnings, 'Unknown version "' + dependencyRange + '" of package "' + dependencyName + '"')
            continue
        endif

        # Add the dependency row
        dependencyData = npmCacheGetPackage(cache, dependencyName)
        dependencyLatest = if(dependencyData != null, npmPackageVersionLatest(dependencyData))
        arrayPush(dependencies, objectNew( \
            'Package', dependencyName, \
            'Version', dependencyVersion, \
            'Latest', if(dependencyVersion == dependencyLatest, '', dependencyLatest), \
            'Range', dependencyRange, \
            'Dependent', packageName, \
            'Dependent Version', packageVersion \
        ))

        # Add the dependency's dependencies
        npmCacheGetPackageDependencies(cache, dependencies, warnings, completed, dependencyName, dependencyVersion, 'dependencies')
    endfor
endfunction


# Get a package's total dependency count
function npmPackageDependencyCount(cache, packageName, packageVersion, dependencyKey)
    dependencies = arrayNew()
    warnings = arrayNew()
    completed = objectNew()
    npmCacheGetPackageDependencies(cache, dependencies, warnings, completed, packageName, packageVersion, dependencyKey)
    dependenciesTotal = dataAggregate(dependencies, objectNew( \
        'categories', arrayNew('Package', 'Version'), \
        'measures', arrayNew( \
            objectNew('field', 'Count', 'function', 'count') \
        ) \
    ))
    return arrayLength(dependenciesTotal)
endfunction


# Compute a package's total and direct dependencies with warnings
function npmPackageStats(cache, packageName, packageVersion, dependencyKey)
    # Get the package dependencies
    dependencies = arrayNew()
    warnings = arrayNew()
    completed = objectNew()
    npmCacheGetPackageDependencies(cache, dependencies, warnings, completed, packageName, packageVersion, dependencyKey)
    if dependencyKey != 'devDependencies':
        npmCacheGetPackageDependencies(cache, dependencies, warnings, completed, packageName, packageVersion, 'optionalDependencies')
    endif

    # Compute the dependency statistics
    dependenciesDirect = dataFilter(dependencies, 'Dependent == packageName && [Dependent Version] == packageVersion', \
        objectNew('packageName', packageName, 'packageVersion', packageVersion))
    dependenciesTotal = dataAggregate(dependencies, objectNew( \
        'categories', arrayNew('Package', 'Version'), \
        'measures', arrayNew( \
            objectNew('field', 'Count', 'function', 'count') \
        ) \
    ))

    # Multiple-dependency-version warning?
    dependenciesMultiple = dataFilter( \
        dataAggregate(dependenciesTotal, objectNew( \
            'categories', arrayNew('Package'), \
            'measures', arrayNew( \
                objectNew('field', 'Count', 'function', 'count') \
            ) \
        )), \
        'Count > 1' \
    )
    if arrayLength(dependenciesMultiple):
        dataSort(dependenciesTotal, arrayNew(arrayNew('Package'), arrayNew('Version')))
        dataSort(dependenciesMultiple, arrayNew(arrayNew('Package'), arrayNew('Version')))
        for dependency in dependenciesMultiple:
            dependencyName = objectGet(dependency, 'Package')
            dependencyVersions = dataFilter(dependenciesTotal, 'Package == dependencyName', objectNew('dependencyName', dependencyName))
            versions = arrayNew()
            for dependencyVersion in dependencyVersions:
                arrayPush(versions, '"' + objectGet(dependencyVersion, 'Version') + '"')
            endfor
            arrayPush(warnings, 'Multiple versions of package "' + dependencyName + '" (' + arrayJoin(versions, ', ') + ')')
        endfor
    endif

    # Return the dependency statistics
    return objectNew( \
        'count', arrayLength(dependenciesTotal), \
        'countDirect', arrayLength(dependenciesDirect), \
        'dependencies', dependencies, \
        'dependenciesDirect', dependenciesDirect, \
        'warnings', warnings \
    )
endfunction
