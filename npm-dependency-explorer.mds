# Licensed under the MIT License
# https://github.com/craigahobbs/npm-dependency-explorer/blob/main/LICENSE

include <args.mds>
include <forms.mds>
include 'npm.mds'


# The npm Dependency Explorer main entry point
async function ndeMain():
    # Parse arguments
    args = argsParse(ndeArguments)
    packageName = objectGet(args, 'name')
    packageVersion = objectGet(args, 'version')
    showDev = objectGet(args, 'dev')
    showWarnings = objectGet(args, 'warn')
    filterDirect = objectGet(args, 'direct')
    filterLatest = objectGet(args, 'latest')
    sortDependencies = objectGet(args, 'sort')
    dependencyKey = if(showDev, 'devDependencies', 'dependencies')

    # Load the package version dependency data
    cache = npmCacheNew()
    if packageName != null:
        packageVersion = npmCacheLoadPackage(cache, packageName, packageVersion, dependencyKey)
    endif
    packageData = if(packageName != null, npmCacheGetPackage(cache, packageName))
    packageJSON = if(packageData != null, npmPackageJSON(packageData, packageVersion))

    # Render the menu
    markdownPrint(if(argsURL(ndeArguments) != '#var=', '[Home](#var=)', 'Home') + ' | [About](#url=README.md)')

    # Render the title
    title = 'npm Dependency Explorer'
    markdownPrint('', '# ' + markdownEscape(title))
    documentSetTitle(title + if(packageJSON != null, ' - ' + packageName, ''))

    # If no package is loaded, render the package selection form
    if packageJSON == null:
        ndeRenderForm(cache, packageName, packageVersion)
        return
    endif

    # Render the package header
    markdownPrint( \
        '', \
        '## [' + markdownEscape(packageName) + '](' + npmPackagePageURL(packageName) + ')', \
        '', \
        '**Description:** ' + markdownEscape(objectGet(packageJSON, 'description')) \
    )

    # Render the package version selection links?
    if objectGet(args, 'versionSelect'):
        ndeRenderVersionLinks(cache, packageName, packageVersion)
        return

    # Render the package version dependency chart?
    elif objectGet(args, 'versionChart'):
        ndeRenderVersionChart(args, cache, packageName, packageVersion, dependencyKey)
        return
    endif

    # Render the package version
    markdownPrint( \
        '', \
        '**Version:** ' + markdownEscape(packageVersion), \
        '(' + argsLink(ndeArguments, 'versions', objectNew('versionSelect', true)) + ' | ', \
        argsLink(ndeArguments, 'chart', objectNew('versionChart', true)) + ')' \
    )

    # Load all dependencies and compute the dependency statistics
    dependencyStats = npmPackageStats(cache, packageName, packageVersion, dependencyKey)
    dependenciesFiltered = objectGet(dependencyStats, if(filterDirect, 'dependenciesDirect', 'dependencies'))
    warnings = objectGet(dependencyStats, 'warnings')

    # Filter to dependencies that have a newer version?
    hasLatest = arrayLength(dataFilter(dependenciesFiltered, "Latest != ''")) > 0
    if hasLatest && filterLatest:
        dependenciesFiltered = dataFilter(dependenciesFiltered, "Latest != ''")
    endif

    # Compute the dependency type links
    linkPackage = if(!showDev, 'Package', argsLink(ndeArguments, 'Package', objectNew('dev', false)))
    linkDevelopment = if(showDev, 'Development', argsLink(ndeArguments, 'Development', objectNew('dev', true)))

    # Render the package dependency stats
    dependenciesDescriptor = if(showDev, '*Development* ', '')
    markdownPrint( \
        '', \
        '**Direct ' + dependenciesDescriptor + 'dependencies:** ' + objectGet(dependencyStats, 'countDirect') + ' \\', \
        '**Total ' + dependenciesDescriptor + 'dependencies:** ' + objectGet(dependencyStats, 'count'), \
        '', \
        '**Type:** ' + linkPackage + ' | ' + linkDevelopment \
    )

    # Render warnings
    if arrayLength(warnings):
        markdownPrint( \
            '', \
            '### Warnings', \
            '', \
            'There are ' + arrayLength(warnings) + ' warnings.' + stringFromCharCode(160), \
            argsLink(ndeArguments, if(showWarnings, 'Hide', 'Show'), objectNew('warn', !showWarnings)) \
        )
        if showWarnings:
            for warning in warnings:
                markdownPrint('', '- ' + markdownEscape(warning))
            endfor
        endif
    endif

    # Render the dependency table
    if arrayLength(dependenciesFiltered):
        # Compute the sort links
        linkSortName = if(!sortDependencies, 'Name', argsLink(ndeArguments, 'Name', objectNew('sort', false)))
        linkSortDependencies = if(sortDependencies, 'Dependencies', argsLink(ndeArguments, 'Dependencies', objectNew('sort', true)))

        # Compute the direct filter links
        linkDirectAll = if(!filterDirect, 'All', argsLink(ndeArguments, 'All', objectNew('direct', false)))
        linkDirect = if(filterDirect, 'Direct', argsLink(ndeArguments, 'Direct', objectNew('direct', true)))

        # Compute the latest filter links
        linkLatestAll = if(!filterLatest, 'All', argsLink(ndeArguments, 'All', objectNew('latest', false)))
        linkLatest = if(filterLatest, 'Latest', argsLink(ndeArguments, 'Latest', objectNew('latest', true)))

        # Render the filter/sort links
        markdownPrint( \
            '', \
            '### ' + if(showDev, 'Development ', '') + 'Dependencies', \
            '', \
            '**Sort:** ' + linkSortName + ' | ' + linkSortDependencies + ' \\', \
            '**Direct:** ' + linkDirectAll + ' | ' + linkDirect + if(hasLatest, ' \\', ''), \
            if(hasLatest, '**Latest:** ' + linkLatestAll + ' | ' + linkLatest, '') \
        )

        # Add the dependency count field
        dataCalculatedField(dependenciesFiltered, 'Dependencies', 'npmPackageDependencyCount(cache, Package, Version, "dependencies")', \
            objectNew('cache', cache))

        # Sort the table data
        sortFields = arrayNew(arrayNew('Package'), arrayNew('Version'), arrayNew('Dependent'), arrayNew('Dependent Version'))
        if sortDependencies:
            sortFields = arrayExtend(arrayNew(arrayNew('Dependencies', 1)), sortFields)
        endif
        dataSort(dependenciesFiltered, sortFields)

        # Make the name field links
        dataCalculatedField(dependenciesFiltered, 'Package', \
            "argsLink(ndeArguments, [Package], objectNew('name', [Package], 'version', [Version]), true, argsTopHeaderId)")
        dataCalculatedField(dependenciesFiltered, 'Dependent', \
            "argsLink(ndeArguments, [Dependent], objectNew('name', [Dependent], 'version', [Dependent Version]), true, argsTopHeaderId)")

        # Render the dependencies table
        dataTable(dependenciesFiltered, objectNew( \
            'categories', arrayNew('Package', 'Version'), \
            'fields', if(hasLatest, \
                arrayNew('Latest', 'Range', 'Dependent', 'Dependent Version', 'Dependencies'), \
                arrayNew('Range', 'Dependent', 'Dependent Version', 'Dependencies') \
            ), \
            'formats', objectNew( \
                'Package', objectNew('markdown', true), \
                'Dependent', objectNew('markdown', true) \
            ) \
        ))
    endif
endfunction


# The npm Dependency Explorer arguments
ndeArguments = argsValidate(arrayNew( \
    objectNew('name', 'dev', 'type', 'bool', 'default', false), \
    objectNew('name', 'direct', 'type', 'bool', 'default', false), \
    objectNew('name', 'latest', 'type', 'bool', 'default', false), \
    objectNew('name', 'name'), \
    objectNew('name', 'sort', 'type', 'bool', 'default', false), \
    objectNew('name', 'version'), \
    objectNew('name', 'versionChart', 'type', 'bool', 'default', false, 'explicit', true), \
    objectNew('name', 'versionSelect', 'type', 'bool', 'default', false, 'explicit', true), \
    objectNew('name', 'warn', 'type', 'bool', 'default', false) \
))


# Render the package selection form
function ndeRenderForm(cache, packageName, packageVersion):
    # Render the search form
    elementModelRender(arrayNew( \
        objectNew('html', 'p', 'elem', objectNew('html', 'b', 'elem', objectNew('text', 'Package Name:'))), \
        objectNew('html', 'p', 'elem', formsTextElements('package-name-text', packageName, 30, ndePackageNameOnClick)), \
        objectNew('html', 'p', 'elem', formsLinkButtonElements('Explore Dependencies', ndePackageNameOnClick)) \
    ))
    documentSetFocus('package-name-text')

    # Render error messages
    if packageName != null:
        packageData = npmCacheGetPackage(cache, packageName)
        if packageData == null:
            markdownPrint('', '**Error:** Unknown package "' + markdownEscape(packageName) + '"')
        elif packageVersion != null && npmPackageJSON(packageData, packageVersion) == null:
            markdownPrint('', '**Error:** Unknown version "' + markdownEscape(packageVersion) + '" of package "' + \
                markdownEscape(packageName) + '"')
        endif
    endif

    # Render example packages
    markdownPrint('', '## Examples')
    for exampleName in arraySort(arrayNew( \
        'c8', 'eslint', 'jsdoc', 'jsdom', 'npm', \
        'bare-script', 'element-model', 'markdown-model', 'markdown-up', 'schema-markdown' \
    )):
        markdownPrint('', argsLink(ndeArguments, exampleName, objectNew('name', exampleName), true))
    endfor
endfunction


# Package name button on-click handler
function ndePackageNameOnClick():
    packageName = stringTrim(documentInputValue('package-name-text'))
    windowSetLocation(argsURL(ndeArguments, objectNew('name', packageName), true))
endfunction


# Render the package version links
function ndeRenderVersionLinks(cache, packageName, packageVersion):
    markdownPrint( \
        '', \
        argsLink(ndeArguments, 'Back to package'), \
        '', \
        '### Versions' \
    )
    packageSemvers = npmCacheGetPackageVersions(cache, packageName)
    packageVersionLatest = npmPackageVersionLatest(npmCacheGetPackage(cache, packageName))
    for packageSemver in packageSemvers:
        packageVersion = semverStringify(packageSemver)
        markdownPrint('', argsLink(ndeArguments, packageVersion, objectNew('version', packageVersion), false, argsTopHeaderId) + \
            if(packageVersion == packageVersionLatest, ' (latest)', ''))
    endfor
endfunction


# Render the package dependencies by version chart
async function ndeRenderVersionChart(args, cache, packageName, packageVersion, dependencyKey):
    markdownPrint( \
        '', \
        argsLink(ndeArguments, 'Back to package'), \
        '', \
        '### ' + if(objectGet(args, 'dev') + '*Development* ', '') + 'Dependencies Chart' \
    )

    # Load all package version dependencies
    npmCacheLoadPackageAll(cache, packageName, dependencyKey)

    # Compute the version dependency data table
    versionDependencies = arrayNew()
    packageSemvers = npmCacheGetPackageVersions(cache, packageName)
    packageSemverCount = arrayLength(packageSemvers)
    for packageSemver, ixSemver in packageSemvers:
        packageVersion = semverStringify(packageSemver)
        arrayPush(versionDependencies, objectNew( \
            'Version Index', packageSemverCount - ixSemver - 1, \
            'Version', argsLink(ndeArguments, packageVersion, objectNew('version', packageVersion), false, argsTopHeaderId), \
            'Dependencies', npmPackageDependencyCount(cache, packageName, packageVersion, dependencyKey) \
        ))
    endfor

    # Render the version dependency data as a line chart and as a table
    dataLineChart(versionDependencies, objectNew( \
        'width', 800, \
        'height', 300, \
        'x', 'Version Index', \
        'y', arrayNew('Dependencies'), \
        'xTicks', objectNew('count', 5), \
        'yTicks', objectNew('count', 5, 'start', 0), \
        'precision', 1 \
    ))
    dataSort(versionDependencies, arrayNew(arrayNew('Version Index', 1)))
    dataTable(versionDependencies, objectNew( \
        'fields', arrayNew('Version Index', 'Version', 'Dependencies'), \
        'formats', objectNew( \
            'Version', objectNew('markdown', true) \
        ) \
    ))
endfunction
