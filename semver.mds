# Licensed under the MIT License
# https://github.com/craigahobbs/npm-dependency-explorer/blob/main/LICENSE


# Create a new SemVer object
function semverNew(major, minor, patch, release):
    semver = objectNew( \
        'major', major, \
        'minor', minor, \
        'patch', patch, \
        'release', release, \
        'build', null \
    )
    return semver
endfunction


# Parse SemVer text to a SemVer object
function semverParse(text, groupSuffix):
    semver = null

    # Match the SemVer text
    match = if(stringLength(text) != null, regexMatch(semverRegexSemver, text), text)
    if match != null:
        groups = objectGet(match, 'groups')
        if groupSuffix == null:
            groupSuffix = ''
        endif

        # Parse the release text
        release = null
        releaseText = objectGet(groups, 'release' + groupSuffix)
        if releaseText != null:
            release = arrayNew()
            for part in stringSplit(releaseText, '.'):
                # Parse all-digits parts as integers
                part = if(regexMatch(semverRegexDigits, part) != null, numberParseInt(part), part)
                arrayPush(release, part)
            endfor
        endif

        # Return the SemVer object
        major = objectGet(groups, 'major' + groupSuffix)
        minor = objectGet(groups, 'minor' + groupSuffix)
        patch = objectGet(groups, 'patch' + groupSuffix)
        build = objectGet(groups, 'build' + groupSuffix)
        semver = objectNew( \
            'major', if(regexTest(semverRegexDigits, major), numberParseInt(major), 0), \
            'minor', if(regexTest(semverRegexDigits, minor), numberParseInt(minor), 0), \
            'patch', if(regexTest(semverRegexDigits, patch), numberParseInt(patch), 0), \
            'release', release, \
            'build', build \
        )
    endif

    return semver
endfunction


# SemVer parsing regular expressions
semverRegexStrReleaseBuild = \
    '(?:-(?<release>(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?' + \
    '(?:\\+(?<build>[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?'
semverRegexSemver = regexNew('^(?<major>0|[1-9]\\d*)\\.(?<minor>0|[1-9]\\d*)\\.(?<patch>0|[1-9]\\d*)' + semverRegexStrReleaseBuild + '$')
semverRegexDigits = regexNew('^\d+$')


# Stringify a SemVer object
function semverStringify(semver):
    release = objectGet(semver, 'release')
    build = objectGet(semver, 'build')
    return arrayJoin(arrayNew( \
        objectGet(semver, 'major'), '.', \
        objectGet(semver, 'minor'), '.', \
        objectGet(semver, 'patch'), \
        if(release != null, '-' + arrayJoin(release, '.'), ''), \
        if(build != null, '+' + build, '') \
    ), '')
endfunction


# SemVer sort comparison func
function semverCompare(semver, other):
    # Compare the major version
    semverMajor = objectGet(semver, 'major')
    otherMajor = objectGet(other, 'major')
    result = if(semverMajor < otherMajor, -1, if(semverMajor == otherMajor, 0, 1))

    # Compare the minor version
    if !result:
        semverMinor = objectGet(semver, 'minor')
        otherMinor = objectGet(other, 'minor')
        result = if(semverMinor < otherMinor, -1, if(semverMinor == otherMinor, 0, 1))
    endif

    # Compare the patch version
    if !result:
        semverPatch = objectGet(semver, 'patch')
        otherPatch = objectGet(other, 'patch')
        result = if(semverPatch < otherPatch, -1, if(semverPatch == otherPatch, 0, 1))
    endif

    # Compare the release
    if !result:
        semverRelease = objectGet(semver, 'release')
        otherRelease = objectGet(other, 'release')
        result = if(semverRelease != null, if(otherRelease != null, 0, -1), if(otherRelease != null, 1, 0))
    endif

    # Compare the release parts
    if !result:
        semverReleaseLength = arrayLength(semverRelease)
        otherReleaseLength = arrayLength(otherRelease)
        releaseLength = mathMax(semverReleaseLength, otherReleaseLength)
        ixPart = 0
        while ixPart < releaseLength:
            semverReleasePart = arrayGet(semverRelease, ixPart)
            otherReleasePart = arrayGet(otherRelease, ixPart)

            # Numeric parts are less-than non-numeric parts
            semverPartNumeric = (stringLength(semverReleasePart) == null)
            otherPartNumeric = (stringLength(otherReleasePart) == null)
            result = if(semverPartNumeric && !otherPartNumeric, -1, if(!semverPartNumeric && otherPartNumeric, 1, 0))
            if result:
                break
            endif

            # Compare the parts
            result = if(semverReleasePart < otherReleasePart, -1, if(semverReleasePart == otherReleasePart, 0, 1))
            if result:
                break
            endif

            ixPart = ixPart + 1
        endwhile
    endif

    # Compare the release parts lengths
    if !result:
        result = if(semverReleaseLength < otherReleaseLength, -1, if(semverReleaseLength == otherReleaseLength, 0, 1))
    endif

    # Compare the build
    if !result:
        semverBuild = objectGet(semver, 'build')
        otherBuild = objectGet(other, 'build')
        result = if(semverBuild != null, if(otherBuild != null, 0, 1), if(otherBuild != null, -1, 0))
        if !result:
            result = if(semverBuild < otherBuild, -1, if(semverBuild == otherBuild, 0, 1))
        endif
    endif

    return result
endfunction


# SemVer reverse-sort comparison func
function semverCompareReversed(semver, other):
    return -semverCompare(semver, other)
endfunction


# Parse an array of SemVer text to an array of SemVer objects
function semverVersions(versions):
    semvers = arrayNew()
    for version in versions:
        semver = semverParse(version)
        if semver != null:
            objectSet(semver, 'semver', objectCopy(semver))
            arrayPush(semvers, semver)
        else:
            systemLogDebug('semver: Unrecognized SemVer "' + version + '"')
        endif
    endfor
    return arraySort(semvers, semverCompareReversed)
endfunction


# Match a SemVer range
function semverMatch(semvers, range):
    # Compute all matched semvers
    matchedSemvers = arrayNew()
    for rangePart in stringSplit(range, semverRegexRangeSplit):
        partSemvers = semverMatchPart(semvers, rangePart)
        if partSemvers != null:
            arrayExtend(matchedSemvers, partSemvers)
        endif
    endfor

    # Compute the best match
    if arrayLength(matchedSemvers):
        arraySort(matchedSemvers, semverCompareReversed)
        return semverStringify(arrayGet(matchedSemvers, 0))
    endif

    return null
endfunction


# Match a SemVer range part
function semverMatchPart(semvers, range):
    # Empty range?
    range = stringTrim(range)
    if range == '':
        return dataFilter(semvers, "objectGet(semver, 'release') == null")
    endif

    # Tilde range
    matchTilde = regexMatch(semverRegexTilde, range)
    if matchTilde != null:
        lower = semverParse(matchTilde)
        groups = objectGet(matchTilde, 'groups')
        lowerHasMinor = regexTest(semverRegexDigits, objectGet(groups, 'minor'))
        if lowerHasMinor:
            upper = semverNew(objectGet(lower, 'major'), objectGet(lower, 'minor') + 1, 0)
        else:
            upper = semverNew(objectGet(lower, 'major') + 1, 0, 0)
        endif
        return semverMatchPartFilter(semvers, lower, upper)
    endif

    # Carrot range
    matchCarrot = regexMatch(semverRegexCarrot, range)
    if matchCarrot != null:
        groups = objectGet(matchCarrot, 'groups')
        lower = semverParse(matchCarrot)
        major = objectGet(lower, 'major')
        minor = objectGet(lower, 'minor')
        patch = objectGet(lower, 'patch')
        upper = semverNew( \
            if(major >= 1, major + 1, major), \
            if(major >= 1, 0, if(minor >= 1, minor + 1, minor)), \
            if(major >= 1, 0, if(minor >= 1, 0, patch + 1)) \
        )
        return semverMatchPartFilter(semvers, lower, upper)
    endif

    # Hypen range
    matchHyphen = regexMatch(semverRegexHyphen, range)
    if matchHyphen != null:
        lower = semverParse(matchHyphen)
        upper = semverParse(matchHyphen, '2')
        groups = objectGet(matchHyphen, 'groups')
        upperInclusive = regexTest(semverRegexDigits, objectGet(groups, 'patch2'))
        return semverMatchPartFilter(semvers, lower, upper, upperInclusive)
    endif

    # Range
    filtered = semvers
    rangeParts = range
    matchRangePart = regexMatch(semverRegexRangePart, rangeParts)
    while matchRangePart != null:
        groups = objectGet(matchRangePart, 'groups')
        rangeOp = objectGet(groups, 'op')
        rangeValue = semverParse(matchRangePart)
        rangeValueHasMajor = regexTest(semverRegexDigits, objectGet(groups, 'major'))
        rangeValueHasMinor = regexTest(semverRegexDigits, objectGet(groups, 'minor'))
        rangeValueHasPatch = regexTest(semverRegexDigits, objectGet(groups, 'patch'))

        # '*'?
        if (rangeOp == '' || rangeOp == '=') && !rangeValueHasMajor:
            filtered = dataFilter(filtered, "objectGet(semver, 'release') == null")

        # Specific-version?
        elif rangeOp == '=' || (rangeOp == '' && rangeValueHasPatch):
            filtered = dataFilter(filtered, 'semverCompare(semver, rangeValue) == 0', objectNew('rangeValue', rangeValue))

        # X-range?
        elif rangeOp == '':
            if rangeValueHasMinor:
                upper = semverNew(objectGet(rangeValue, 'major'), objectGet(rangeValue, 'minor') + 1, 0)
            else:
                upper = semverNew(objectGet(rangeValue, 'major') + 1, 0, 0, '0')
            endif
            filtered = semverMatchPartFilter(filtered, lower, upper)

        # ">", ">=", "<", "<="
        else:
            filtered = dataFilter( \
                filtered, \
                "objectGet(semver, 'release') == null && semverCompare(semver, rangeValue) " + rangeOp + ' 0', \
                objectNew('rangeValue', rangeValue) \
            )
        endif

        rangeParts = stringSlice(rangeParts, stringLength(arrayGet(matchRangePart, 0)))
        matchRangePart = regexMatch(semverRegexRangePart, rangeParts)
    endwhile

    # Syntax error?
    if rangeParts != '':
        return null
    endif

    return filtered
endfunction


# Helper to filter a lower-upper semver range
function semverMatchPartFilter(semvers, lower, upper, upperInclusive):
    # Filter pre-release versions
    if objectGet(lower, 'release') == null:
        filtered = dataFilter(semvers, "objectGet(semver, 'release') == null")
    else:
        filtered = dataFilter( \
            semvers, \
            "objectGet(semver, 'release') == null || (major == lowerMajor && minor == lowerMinor && patch == lowerPatch)", \
            objectNew( \
                'lowerMajor', objectGet(lower, 'major'), 'lowerMinor', objectGet(lower, 'minor'), 'lowerPatch', objectGet(lower, 'patch') \
            ) \
        )
    endif

    # Filter the the hyphen range
    return dataFilter( \
        filtered, \
        'semverCompare(semver, lower) >= 0 && semverCompare(semver, upper) ' + if(upperInclusive, '<=', '<') + ' 0', \
        objectNew('lower', lower, 'upper', upper) \
    )
endfunction


# SemVer range regular expressions
semverRegexRangeSplit = regexNew('\\s*\\|\\|\\s*')
semverRegexStrVersion = \
    '(?<major>[xX*]|0|[1-9]\\d*)(?:\\.(?<minor>[xX*]|0|[1-9]\\d*)(?:\\.(?<patch>[xX*]|0|[1-9]\\d*)' + semverRegexStrReleaseBuild + ')?)?'
semverRegexStrVersion2 = stringReplace(stringReplace(stringReplace(stringReplace(stringReplace(semverRegexStrVersion, \
    '<major>', '<major2>'), '<minor>', '<minor2>'), '<patch>', '<patch2>'), '<release>', '<release2>'), '<build>', '<build2>')
semverRegexVersion = regexNew('^' + semverRegexStrVersion + '$')
semverRegexRangePart = regexNew('^(?<op>|=|<|<=|>|>=)\\s*' + semverRegexStrVersion + '\\s*')
semverRegexCarrot = regexNew('^\\^\\s*' + semverRegexStrVersion + '$')
semverRegexHyphen = regexNew('^' + semverRegexStrVersion + '\\s+-\\s+' + semverRegexStrVersion2 + '$')
semverRegexTilde = regexNew('^~\\s*' + semverRegexStrVersion + '$')
